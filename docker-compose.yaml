version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "MYNEWLONGSECURECOOKIE12345"
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  db:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: loan_db
    ports:
      - "5432:5432"
    restart: unless-stopped

  loan_service:
    build: ./demande-pret-service
    container_name: loan_service
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_started
    restart: unless-stopped

  verification-completude-service:
    build: ./verification-completude-service
    container_name: verification_completude_service
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: unless-stopped

  completer-dossier-service:
    build: ./completer-dossier
    container_name: completer_dossier_service
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      smtp_server:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=smtp_server
      - SMTP_PORT=1025
    restart: unless-stopped
  
  envoyer-accord-rembourchement:
    build: ./envoyer-accord-rembourchement
    container_name: envoyer-accord-rembourchement
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      smtp_server:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=smtp_server
      - SMTP_PORT=1025
    restart: unless-stopped

  recevoir-accord-signer:
    build: ./recevoir-accord-signer
    container_name: recevoir-accord-signer
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      smtp_server:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - SMTP_HOST=smtp_server
      - SMTP_PORT=1025
    restart: unless-stopped

  smtp_server:
    image: python:3.10
    container_name: smtp_server
    command: >
      sh -c "pip install aiosmtpd && python -m aiosmtpd --listen 0.0.0.0:1025 --debug"
    ports:
      - "1025:1025"
    restart: unless-stopped


  verification-bien-service:
    build: ./Verification-bien-service
    container_name: verification_bien_service
    depends_on:
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: unless-stopped

  verification-credit-service:
    build: ./verification-credit-service
    container_name: verification_credit_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: unless-stopped

  property_celery_worker:
    build: ./verification-credit-service
    container_name: property_celery_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    restart: unless-stopped

  decision_service:
    build: ./decision-service
    container_name: decision_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  eligibility_service:
    build: ./eligibilite-service
    container_name: eligibility_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8002:8000"

  rejection_service:
    build: ./rejet-service
    container_name: rejection_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8003:8000"

  notification_service:
    build: ./notification-service
    ports:
      - "8004:8000"
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq



  verification_bien_worker:
    build: ./Verification-bien-service
    container_name: verification_bien_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    restart: unless-stopped

  verification_credit_worker:
    build: ./verification-credit-service
    container_name: verification_credit_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    restart: unless-stopped


  flower:
    image: mher/flower
    container_name: flower
    command: [ "celery", "-A", "tasks", "flower", "--port=5555" ]
    depends_on:
      - property_celery_worker
      - verification_bien_worker
      - verification_credit_worker
    ports:
      - "5555:5555"
