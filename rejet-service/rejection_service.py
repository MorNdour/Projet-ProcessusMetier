import logging
import json
import pika
from fastapi import FastAPI

# Configuration des logs
logging.basicConfig(level=logging.INFO)

app = FastAPI()

# Connexion √† RabbitMQ
RABBITMQ_HOST = "rabbitmq"
QUEUE_REJECTED = "loan_rejected"


def connect_rabbitmq():
    """ √âtablit la connexion avec RabbitMQ """
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=QUEUE_REJECTED, durable=True)
    return connection, channel


def rejection_callback(ch, method, properties, body):
    """ √âcoute les refus et envoie une notification """
    data = json.loads(body)
    client_id = data["client_id"]

    logging.info(
        f" [‚ùå] Pr√™t REFUS√â pour {client_id} - Score cr√©dit: {data['credit_score']}, Valeur bien: {data['property_value']}")

    # Simuler l‚Äôenvoi d‚Äôun email de rejet (peut √™tre int√©gr√© avec un vrai service mail)
    print(f"üì© Notification envoy√©e √† {client_id}: Votre pr√™t a √©t√© refus√©.")


def consume_messages():
    """ √âcoute la file `loan_rejected` """
    connection, channel = connect_rabbitmq()
    channel.basic_consume(queue=QUEUE_REJECTED, on_message_callback=rejection_callback, auto_ack=True)
    logging.info(f" [‚úî] En attente des d√©cisions de refus...")
    channel.start_consuming()


# Lancer la consommation des messages en arri√®re-plan
import threading

threading.Thread(target=consume_messages, daemon=True).start()
